function out = Diffcon_signature(f, varargin)
derivative_order = 3;
group = 'Diffcon';
out = signature_switch(f, @evaluate, derivative_order, group, varargin{:});
    function sig = evaluate(derivs)
        [f, fx, fy, fxx, fxy, fyy, fxxx, fxxy, fxyy, fyyy] = derivs{:};
        I1 = (fxx + fyy)./(fx.^2 + fy.^2);
        I2 = (fy.^3.*fyyy + fx.^2.*fy.*fyyy -2*fy.^2.*fyy.^2 - ...
            2*fxx.*fy.^2.*fyy - 4*fx.*fxy.*fy.*fyy - 2*fx.^2.*fxx.*fyy + ...
            fxxy.*fy.^3 + fx.^2.*fxxy.*fy - 4*fx.*fxy.*fxx.*fy + ...
            fx.^3.*fxxx - 2*fx.^2.*fxx.^2 + fx.^3.*fxyy)./...
            ((fx.^2 + fy.^2).^3);
        I3 = (fx.*fy.^2.*fyyy + fx.^3.*fyyy - 2*fx.*fy.*fyy.^2 + ...
        2*fxy.*fy.^2.*fyy - 2*fx.^2.*fxy.*fyy - fxxx.*fy.^3 - ...
        fxyy.*fy.^3 + fx.*fxxy.*fy.^2 + 2*fxy.*fxx.*fy.^2 - ...
        fx.^2.*fxxx.*fy + 2*fx.*fxx.^2.*fy - fx.^2.*fxyy.*fy + ...
        fx.^3.*fxxy - 2*fx.^2.*fxy.*fxx)./((fx.^2 + fy.^2).^3);

        denom = sqrt(I1.^6 + I2.^2 + I3.^2);
        sig = {f.*I1.^3./denom, f.*I2./denom, f.*I3./denom};
    end
end

